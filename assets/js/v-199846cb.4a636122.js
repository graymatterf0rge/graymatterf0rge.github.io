"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[4471],{3686:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-199846cb",path:"/blogs/frontEnd/2019/061501.html",title:"webpack 配置多页面应用的一次尝试",lang:"zh-CN",frontmatter:{title:"webpack 配置多页面应用的一次尝试",date:"2019-06-15T00:00:00.000Z",tags:["webpack"],categories:["frontEnd"]},excerpt:'<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ol>\n<li>\n<p>最近有一个项目，考虑到要进行 SEO，所以要做成多页面应用。为了保证开发速度和开发效率，所以决定使用 webpack 做一套模块化配置方案。</p>\n</li>\n<li>\n<p>下面主要针对一些重要的点提供思路，并不作详解。完整的代码，我会放在 github（<a href="https://github.com/recoluan/webpack-multipage-demo" target="_blank" rel="noopener noreferrer">项目地址<OutboundLink/></a>）上供大家参考，如果有优化的地方，请在评论区指点出来。</p>\n</li>\n</ol>\n</div>',headers:[{level:2,title:"目录",slug:"目录",children:[]},{level:2,title:"多页面",slug:"多页面",children:[{level:3,title:"html 模板",slug:"html-模板",children:[]},{level:3,title:"入口文件",slug:"入口文件",children:[]}]},{level:2,title:"JS",slug:"js",children:[]},{level:2,title:"CSS",slug:"css",children:[]},{level:2,title:"images",slug:"images",children:[]},{level:2,title:"其他",slug:"其他",children:[{level:3,title:"devserver 和 热更新",slug:"devserver-和-热更新",children:[]},{level:3,title:"报错",slug:"报错",children:[]}]}],git:{createdTime:159076981e4,updatedTime:159076981e4,contributors:[{name:"reco_luan",email:"recoluan@outlook.com",commits:1}]}}},6715:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var p=a(6252);const e={class:"custom-container tip"},t=(0,p._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,p._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,p._)("circle",{cx:"12",cy:"12",r:"9"}),(0,p._)("path",{d:"M12 8h.01"}),(0,p._)("path",{d:"M11 12h1v4h1"})])],-1),o=(0,p._)("p",{class:"custom-container-title"},"TIP",-1),c=(0,p._)("li",null,[(0,p._)("p",null,"最近有一个项目，考虑到要进行 SEO，所以要做成多页面应用。为了保证开发速度和开发效率，所以决定使用 webpack 做一套模块化配置方案。")],-1),l=(0,p.Uk)("下面主要针对一些重要的点提供思路，并不作详解。完整的代码，我会放在 github（"),r={href:"https://github.com/recoluan/webpack-multipage-demo",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("项目地址"),i=(0,p.Uk)("）上供大家参考，如果有优化的地方，请在评论区指点出来。"),k=(0,p.uE)('<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>|-- build                           webpack 配置\n|   |-- utils.js                    处理 webpack 配置的公共方法\n|   |-- webpack.base.conf.js        公共配置    \n|   |-- webpack.dev.conf.js         开发环境配置\n|   |-- webapck.prod.conf.js        生产环境配置\n|   |-- webpack.rules.conf.js       文件处理规则\n|-- dist                            存放变异后文件\n|-- |\n|-- src                             源文件\n|   |-- assets\n|   |-- pages \n|   |   |-- index                   首页\n|   |   |   |-- index.html          首页模板\n|   |   |   |-- index.js            首页入口文件\n|   htmlarrary.js                   页面配置文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="多页面" tabindex="-1"><a class="header-anchor" href="#多页面" aria-hidden="true">#</a> 多页面</h2><p>多页面，首先最重要的就是处理多个 html 模板和对应的多个入口文件。</p><h3 id="html-模板" tabindex="-1"><a class="header-anchor" href="#html-模板" aria-hidden="true">#</a> html 模板</h3><p>在项目根目录创建一个 <code>htmlarrary.js</code>，用来存储页面配置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// htmlarrary.js</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    _html<span class="token operator">:</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span>\n    chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;manifest&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vendors&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 页面用到的vendor模块</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    _html<span class="token operator">:</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;登录&#39;</span><span class="token punctuation">,</span>\n    chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>然后在 <code>/build/utils.js</code> 创建 <code>getHtmlArray</code> 方法，用来自动生成多个模板的配置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// /build/utils.js</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> htmlArray <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../htmlarray.js&#39;</span><span class="token punctuation">)</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">getHtmlArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">moduleExportsPlugins</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// 根据模板配置生成 HtmlWebpackPlugin 需要的配置</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">getHtmlConfig</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> chunks<span class="token punctuation">,</span> title</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./src/pages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/index.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      filename<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      favicon<span class="token operator">:</span> <span class="token string">&#39;./src/assets/images/public/favicon.ico&#39;</span><span class="token punctuation">,</span>\n      title<span class="token punctuation">,</span>\n      inject<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      hash<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启hash</span>\n      chunks<span class="token punctuation">,</span> <span class="token comment">// 页面要引入的包</span>\n      minify<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token punctuation">{</span>\n        removeComments<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 移除HTML中的注释</span>\n        collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 折叠空白区域 也就是压缩代码</span>\n        removeAttributeQuotes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 去除属性引用</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 循环创建模板配置</span>\n  htmlArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> _html<span class="token punctuation">,</span> chunks<span class="token punctuation">,</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> element\n    moduleExportsPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token function">getHtmlConfig</span><span class="token punctuation">(</span>_html<span class="token punctuation">,</span> chunks<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>在 <code>webpack.base.conf.js</code> 中通过 <code>getHtmlArray</code> 添加多页面引擎配置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> getHtmlArray <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... 相关配置</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">getHtmlArray</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="入口文件" tabindex="-1"><a class="header-anchor" href="#入口文件" aria-hidden="true">#</a> 入口文件</h3><p>在 <code>/build/utils.js</code> 创建 <code>getEntry</code> 方法，用来自动生成入口文件的配置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// /build/utils.js</span>\n<span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;glob&#39;</span><span class="token punctuation">)</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">getEntry</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// 读取src目录所有page入口</span>\n  glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token string">&#39;./src/pages/*/*.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> start <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;src/&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> end <span class="token operator">=</span> name<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> eArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> n <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    eArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    eArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/polyfill&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入这个，是为了用async await，一些IE不支持的属性能够受支持，兼容IE浏览器用的</span>\n    entry<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> eArr<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> entry<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在 <code>webpack.base.conf.js</code> 中通过 <code>getEntry</code> 添加多入口配置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.base.conf.js</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> getEntry <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="js" tabindex="-1"><a class="header-anchor" href="#js" aria-hidden="true">#</a> JS</h2><p>JS 方面，我们一般有以下需求：</p><ol><li>eslint 错误提醒；</li><li>ts-loader 解析 typescript 语法；</li><li>babel-loader 解析 ES6 语法。</li></ol><p>针对以上需求，我们来配置一下子 rules，并且做一下延伸：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.rules.conf.js</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(js|ts)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    use<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          presets<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n              useBuiltIns<span class="token operator">:</span> <span class="token string">&#39;usage&#39;</span><span class="token punctuation">,</span>\n              targets<span class="token operator">:</span> <span class="token punctuation">{</span>\n                chrome<span class="token operator">:</span> <span class="token string">&#39;58&#39;</span><span class="token punctuation">,</span>\n                ie<span class="token operator">:</span> <span class="token string">&#39;8&#39;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              corejs<span class="token operator">:</span> <span class="token number">2</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">&#39;ts-loader&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">&#39;eslint-loader&#39;</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          cache<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 优化打包速度</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>在生产环境，我们需要对 js 文件进行压缩，公共代码抽离，所以还需要在 <code>webpack.prod.conf.js</code> 中这样去优化一下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.prod.conf.js</span>\n\ncconst merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;uglifyjs-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.base.conf.js&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> prodConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// 会导致 sourcemap 消失</span>\n      <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        uglifyOptions<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          compress<span class="token operator">:</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      chunks<span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>\n      cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        vendors<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 抽离第三方插件</span>\n          test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 指定是node_modules下的第三方包</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;vendors&#39;</span><span class="token punctuation">,</span>\n          priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token comment">// 抽取优先级</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        utilCommon<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 抽离自定义</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;common&#39;</span><span class="token punctuation">,</span>\n          minSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 将引用模块分离成新代码文件的最小体积</span>\n          minChunks<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 表示将引用模块如不同文件引用了多少次，才能分离生成新chunk</span>\n          priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// optimization.runtimeChunk 就是告诉 webpack 是否要把这部分单独打包出来，来优化缓存问题</span>\n    runtimeChunk<span class="token operator">:</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;manifest&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> prodConfig<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><p>CSS 方面，我们一般有以下需求：</p><ol><li>postcss-loader 安装 autoprefixer 插件，自动进行兼容性处理；</li><li>sass-loader 解析 sass 语法；</li><li>MiniCssExtractPlugin 进行 css 压缩。</li></ol><p>针对以上需求，我们来配置一下子 rules，并且做一下延伸：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.rules.conf.js</span>\n<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.scss$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n    use<span class="token operator">:</span> <span class="token punctuation">[</span>\n      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>\n        <span class="token comment">// 生产环境压缩 css 需要使用 MiniCssExtractPlugin.loader 代替 style-loader</span>\n        <span class="token punctuation">{</span> loader<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader <span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// 解决编译后 css 图片不能正常显示的问题</span>\n        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> publicPath<span class="token operator">:</span> <span class="token string">&#39;../&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;sass-loader&#39;</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;postcss-loader&#39;</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在生产环境，我们需要对 css 文件进行压缩，所以还需要在 <code>webpack.prod.conf.js</code> 中这样去优化一下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.prod.conf.js</span>\n\ncconst merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> OptimizeCSSAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;optimize-css-assets-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.base.conf.js&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> prodConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      filename<span class="token operator">:</span> <span class="token string">&#39;css/[name].[contenthash:8].css&#39;</span><span class="token punctuation">,</span>\n      chunkFileName<span class="token operator">:</span> <span class="token string">&#39;[id].[contenthash:8].css&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> prodConfig<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="images" tabindex="-1"><a class="header-anchor" href="#images" aria-hidden="true">#</a> images</h2><p>images 方面，我们一般有以下需求：</p><ol><li>css 和 js 中的图片可以被解析；</li><li>html 中 img 标签的图片可以被解析。</li></ol><p>针对以上需求，我们来配置一下子 rules，并且做一下延伸：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.rules.conf.js</span>\n<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    use<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// 如果 img 标签的 src 为空的话，就报错 xxxHTMLLINKxxx0.</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">&#39;html-loader&#39;</span><span class="token punctuation">,</span> \n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|gif|ico)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    use<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;[name].[hash:8].[ext]&#39;</span><span class="token punctuation">,</span>\n          limit<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>\n          outputPath<span class="token operator">:</span> <span class="token string">&#39;./images&#39;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="devserver-和-热更新" tabindex="-1"><a class="header-anchor" href="#devserver-和-热更新" aria-hidden="true">#</a> devserver 和 热更新</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.dev.conf.js</span>\n\n<span class="token keyword">const</span> devConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    host<span class="token operator">:</span> <span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span>\n    port<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>\n    useLocalIp<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    hot<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',38),b=(0,p.Uk)("这样智能启动 css 热更新，如果需要 js 热更新，需要添加一段代码，请自行查找 "),m={href:"https://webpack.docschina.org/",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("官网文档"),g=(0,p.Uk)("。"),h=(0,p.uE)('<h3 id="报错" tabindex="-1"><a class="header-anchor" href="#报错" aria-hidden="true">#</a> 报错</h3><ol><li>如果 img 标签的 src 为空的话，就报错 xxxHTMLLINKxxx0.</li><li>如果报错：<code>TS2688: Cannot find type definition file for &#39;unist&#39;.</code> 说明需要安装依赖 <code>@types/unist</code>，其他类似报错一样，这是 <code>typescript@2.0</code> 更换 types 支持方式导致的报错。</li><li>编译后 css 图片路径错误，根据是否是生产环境来动态添加 <code>publicPath</code>，<a href="#CSS">点击这里</a>。</li></ol>',2),v={},f=(0,a(3744).Z)(v,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("div",e,[t,o,(0,p._)("ol",null,[c,(0,p._)("li",null,[(0,p._)("p",null,[l,(0,p._)("a",r,[u,(0,p.Wm)(a)]),i])])])]),k,(0,p._)("blockquote",null,[(0,p._)("p",null,[b,(0,p._)("a",m,[d,(0,p.Wm)(a)]),g])]),h],64)}]])}}]);