"use strict";(self.webpackChunkafternoon_grocery_store=self.webpackChunkafternoon_grocery_store||[]).push([[5737],{5327:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-382f39e9",path:"/blogs/frontEnd/2018/091301.html",title:"reco-fetch",lang:"zh-CN",frontmatter:{title:"reco-fetch",date:"2018-09-13T00:00:00.000Z",tags:["npm","fetch","vue","rect"],categories:["frontEnd"]},excerpt:'<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ul>\n<li><code>fetch</code> 必然要替换 <code>XMLHttpRequest</code> ，所以是时候尝试 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noopener noreferrer">fetch<OutboundLink/></a> 了；</li>\n<li>本封装仅针对npm引入；</li>\n<li>本封装依赖 <a href="https://github.com/github/fetch" target="_blank" rel="noopener noreferrer">es6-promise<OutboundLink/></a> 和 <a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener noreferrer">whatwg-fetch<OutboundLink/></a>，分别对 <code>promise</code> 和 <code>fetch</code> 进行兼容性处理；</li>\n<li>还有一种兼容性处理是依赖 <a href="https://github.com/github/fetch" target="_blank" rel="noopener noreferrer">es6-promise<OutboundLink/></a> 和<a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="noopener noreferrer">isomorphic-fetch<OutboundLink/></a> ，但是看它的源码就会发现，<code>isomorphic-fetch</code> 只不过是引用了 <code>whatwg-fetch</code> ，并没有做二次开发，<code>isomorphic-fetch</code> 只是将fetch添加为全局，以便其API在客户端和服务器之间保持一致，所以没必要。</li>\n</ul>\n</div>',headers:[{level:2,title:"封装的主要内容",slug:"封装的主要内容",children:[]},{level:2,title:"Install",slug:"install",children:[]},{level:2,title:"Including reco-fetch",slug:"including-reco-fetch",children:[{level:3,title:"Script tag",slug:"script-tag",children:[]},{level:3,title:"Import",slug:"import",children:[]}]},{level:2,title:"Config",slug:"config",children:[]},{level:2,title:"Example",slug:"example",children:[{level:3,title:"GET",slug:"get",children:[]},{level:3,title:"POST JSON",slug:"post-json",children:[]},{level:3,title:"PUT",slug:"put",children:[]},{level:3,title:"DELETE",slug:"delete",children:[]},{level:3,title:"uploadFile",slug:"uploadfile",children:[]}]},{level:2,title:"License",slug:"license",children:[]}],git:{createdTime:159076981e4,updatedTime:159076981e4,contributors:[{name:"reco_luan",email:"recoluan@outlook.com",commits:1}]}}},7708:(n,s,a)=>{a.r(s),a.d(s,{default:()=>nn});var p=a(6252);const e={class:"custom-container tip"},t=(0,p._)("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[(0,p._)("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,p._)("circle",{cx:"12",cy:"12",r:"9"}),(0,p._)("path",{d:"M12 8h.01"}),(0,p._)("path",{d:"M11 12h1v4h1"})])],-1),o=(0,p._)("p",{class:"custom-container-title"},"TIP",-1),c=(0,p._)("code",null,"fetch",-1),l=(0,p.Uk)(" 必然要替换 "),r=(0,p._)("code",null,"XMLHttpRequest",-1),u=(0,p.Uk)(" ，所以是时候尝试 "),i={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("fetch"),b=(0,p.Uk)(" 了；"),m=(0,p._)("li",null,"本封装仅针对npm引入；",-1),d=(0,p.Uk)("本封装依赖 "),h={href:"https://github.com/github/fetch",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("es6-promise"),f=(0,p.Uk)(" 和 "),v={href:"https://github.com/stefanpenner/es6-promise",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("whatwg-fetch"),w=(0,p.Uk)("，分别对 "),y=(0,p._)("code",null,"promise",-1),x=(0,p.Uk)(" 和 "),j=(0,p._)("code",null,"fetch",-1),U=(0,p.Uk)(" 进行兼容性处理；"),S=(0,p.Uk)("还有一种兼容性处理是依赖 "),F={href:"https://github.com/github/fetch",target:"_blank",rel:"noopener noreferrer"},I=(0,p.Uk)("es6-promise"),q=(0,p.Uk)(" 和"),P={href:"https://github.com/matthew-andrews/isomorphic-fetch",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("isomorphic-fetch"),O=(0,p.Uk)(" ，但是看它的源码就会发现，"),T=(0,p._)("code",null,"isomorphic-fetch",-1),L=(0,p.Uk)(" 只不过是引用了 "),W=(0,p._)("code",null,"whatwg-fetch",-1),D=(0,p.Uk)(" ，并没有做二次开发，"),A=(0,p._)("code",null,"isomorphic-fetch",-1),C=(0,p.Uk)(" 只是将fetch添加为全局，以便其API在客户端和服务器之间保持一致，所以没必要。"),M=(0,p.uE)('<h2 id="封装的主要内容" tabindex="-1"><a class="header-anchor" href="#封装的主要内容" aria-hidden="true">#</a> 封装的主要内容</h2><ol><li><code>fetch</code> 的请求方式同 <code>$ajax</code> 和 <code>axios</code> 都不太一样，并且它本身的get请求同其他请求对数据的处理和herder也不太相同，所以为了统一请求行为，方便请求过程，将请求过程进行封装；</li><li><code>fetch</code> 请求的结果均返回到.then()中，但是平时的习惯是是在 <code>.then()</code> 中处理正确结果，<code>.catch()</code> 中处理错误，所以对请求结果进行统一处理；</li><li><code>fetch</code> 本身没有 <strong>请求超时</strong> 这个概念，所以通过 <code>Promise.race</code> 来处理，它的作用是多个promise同时运行，返回的结果以最快返回结果的那个promise的值为准。</li></ol><p>Fetch for browser.</p><h2 id="install" tabindex="-1"><a class="header-anchor" href="#install" aria-hidden="true">#</a> Install</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">npm</span> isntall reco-fetch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="including-reco-fetch" tabindex="-1"><a class="header-anchor" href="#including-reco-fetch" aria-hidden="true">#</a> Including reco-fetch</h2><h3 id="script-tag" tabindex="-1"><a class="header-anchor" href="#script-tag" aria-hidden="true">#</a> Script tag</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/node_modules/reco-fetch/dist/recoFetch.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> Import</h3><div class="language-javscript ext-javscript line-numbers-mode"><pre class="language-javscript"><code>import recoFetch from &#39;reco-fetch&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> Config</h2>',11),N=(0,p.Uk)("In addition to the parameters given below, please combine other parameters "),R={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options",target:"_blank",rel:"noopener noreferrer"},z=(0,p.Uk)("MDN"),H=(0,p.Uk)("."),J=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">,</span> must<span class="token punctuation">}</span></span> <span class="token parameter">url</span>    API URL\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">,</span> must<span class="token punctuation">}</span></span> <span class="token parameter">options</span> Parameter objects, including:\n *        method  <span class="token punctuation">{</span>String, optional<span class="token punctuation">}</span> Request method, default &#39;get&#39;\n *        headers <span class="token punctuation">{</span>Object, optional<span class="token punctuation">}</span> Set request header\n *        params  <span class="token punctuation">{</span>Object, optional<span class="token punctuation">}</span> url parameters\n *        body    <span class="token punctuation">{</span>Object, optional<span class="token punctuation">}</span> request body\n *        timeout <span class="token punctuation">{</span>Number, optional<span class="token punctuation">}</span> Request timeout\n *        type    <span class="token punctuation">{</span>String, optional<span class="token punctuation">}</span> When &#39;post&#39; requests, you can set: &#39;json&#39;, &#39;formData&#39;\n */</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n  headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">recoFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> GET</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n  params<span class="token operator">:</span> <span class="token punctuation">{</span>\n    key<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">recoFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="post-json" tabindex="-1"><a class="header-anchor" href="#post-json" aria-hidden="true">#</a> POST JSON</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> <span class="token punctuation">{</span>\n    key<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;json&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">recoFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>POST formData</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> <span class="token punctuation">{</span>\n    key<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;formData&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// or</span>\n\n<span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> form\n<span class="token punctuation">}</span>\n\n<span class="token function">recoFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="put" tabindex="-1"><a class="header-anchor" href="#put" aria-hidden="true">#</a> PUT</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> <span class="token punctuation">{</span>\n    key<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;json&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// or</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    key<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">recoFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> DELETE</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">,</span>\n  params<span class="token operator">:</span> <span class="token punctuation">{</span>\n    key<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">recoFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="uploadfile" tabindex="-1"><a class="header-anchor" href="#uploadfile" aria-hidden="true">#</a> uploadFile</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fileField <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;input[type=&#39;file&#39;]&quot;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> <span class="token punctuation">{</span>\n    file<span class="token operator">:</span> fileField<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;formData&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// or</span>\n\n<span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fileField <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;input[type=&#39;file&#39;]&quot;</span><span class="token punctuation">)</span>\n\nformData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> fileField<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> formData\n<span class="token punctuation">}</span>\n\n<span class="token function">recoFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license" aria-hidden="true">#</a> License</h2>',15),B={href:"https://github.com/recoluan/reco-fetch/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},G=(0,p.Uk)("MIT"),X=(0,p.Uk)("如果觉得还可以，欢迎给个 "),Z={href:"https://github.com/recoluan/reco-fetch",target:"_blank",rel:"noopener noreferrer"},$=(0,p.Uk)("Star"),Y=(0,p.Uk)("个人博客："),K={href:"http://recoluan.gitlab.io",target:"_blank",rel:"noopener noreferrer"},Q=(0,p._)("strong",null,"午后南杂",-1),V={},nn=(0,a(3744).Z)(V,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("div",e,[t,o,(0,p._)("ul",null,[(0,p._)("li",null,[c,l,r,u,(0,p._)("a",i,[k,(0,p.Wm)(a)]),b]),m,(0,p._)("li",null,[d,(0,p._)("a",h,[g,(0,p.Wm)(a)]),f,(0,p._)("a",v,[_,(0,p.Wm)(a)]),w,y,x,j,U]),(0,p._)("li",null,[S,(0,p._)("a",F,[I,(0,p.Wm)(a)]),q,(0,p._)("a",P,[E,(0,p.Wm)(a)]),O,T,L,W,D,A,C])])]),M,(0,p._)("p",null,[N,(0,p._)("a",R,[z,(0,p.Wm)(a)]),H]),J,(0,p._)("p",null,[(0,p._)("a",B,[G,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("strong",null,[X,(0,p._)("a",Z,[$,(0,p.Wm)(a)])])]),(0,p._)("p",null,[Y,(0,p._)("a",K,[Q,(0,p.Wm)(a)])])],64)}]])}}]);